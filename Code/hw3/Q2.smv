MODULE main

DEFINE N := 3; K := 3;
--goal taken from final configuration on page 443
DEFINE goal := (h[0]=3 & v[0]=1) & (h[1]=2 & v[1]=1) & (h[2]=1 & v[2]=1) & (h[3]=3 & v[3]=2) & (h[4]=2 & v[4]=2) & (h[5]=1 & v[5]=2) & (h[6]=3 & v[6]=3) & (h[7]=2 & v[7]=3) & (h[8]=1 & v[8]=3);

VAR move: {u, d, l, r}; -- the possible tile-moves
    h: array 0..8 of 1..3; -- the horizontal positions of all tiles
    v: array 0..8 of 1..3; -- .... and their vertical positions
ASSIGN -- the initial horizontal and vertical positions of all tiles
    init(h[0]) := 1; init(v[0]) := 3;
    init(h[1]) := 2; init(v[1]) := 3;
    init(h[2]) := 3; init(v[2]) := 3;
    init(h[3]) := 1; init(v[3]) := 2;
    init(h[4]) := 2; init(v[4]) := 2;
    init(h[5]) := 3; init(v[5]) := 2;
    init(h[6]) := 1; init(v[6]) := 1;
    init(h[7]) := 2; init(v[7]) := 1;
    init(h[8]) := 3; init(v[8]) := 1;
ASSIGN
    next(move) := {u,d,l,r};

    -- determine the next positions of the blank tile
    next(h[0]) := -- horizontal position of the blank tile
        case
            -- one position right
            h[0]<3 & move=r : h[0]+1;
            -- one position left
            h[0]>1 & move=l : h[0]-1;
            TRUE: h[0]; -- keep the same horizontal position
            esac;
    next(v[0]) := -- vertical position of the blank tile
        case
            -- one position down
            v[0]>1 & move=d : v[0]-1;
            -- one position up
            v[0]<3 & move=u: v[0]+1;
            TRUE : v[0]; -- keep the same vertical position
            esac;
    -- determine the next positions of all non-blank tiles
    next(h[1]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[1]=v[0] & ((h[1]-h[0]=1 & move=r) | (h[1]-h[0]=-1 & move=l)): h[0];
            TRUE: h[1];
        esac;
    next(v[1]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[1]=h[0] & ((v[1]-v[0]=1 & move=u) | (v[1]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[1];
        esac;
        -- and similar for all remaining tiles
    next(h[2]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[2]=v[0] & ((h[2]-h[0]=1 & move=r) | (h[2]-h[0]=-1 & move=l)): h[0];
            TRUE: h[2];
        esac;
    next(v[2]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[2]=h[0] & ((v[2]-v[0]=1 & move=u) | (v[2]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[2];
        esac;

    next(h[3]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[3]=v[0] & ((h[3]-h[0]=1 & move=r) | (h[3]-h[0]=-1 & move=l)): h[0];
            TRUE: h[3];
        esac;
    next(v[3]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[3]=h[0] & ((v[3]-v[0]=1 & move=u) | (v[3]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[3];
        esac;
    
    next(h[4]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[4]=v[0] & ((h[4]-h[0]=1 & move=r) | (h[4]-h[0]=-1 & move=l)): h[0];
            TRUE: h[4];
        esac;
    next(v[4]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[4]=h[0] & ((v[4]-v[0]=1 & move=u) | (v[4]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[4];
        esac;

    next(h[5]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[5]=v[0] & ((h[5]-h[0]=1 & move=r) | (h[5]-h[0]=-1 & move=l)): h[0];
            TRUE: h[5];
        esac;
    next(v[5]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[5]=h[0] & ((v[5]-v[0]=1 & move=u) | (v[5]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[5];
        esac;

    next(h[6]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[6]=v[0] & ((h[6]-h[0]=1 & move=r) | (h[6]-h[0]=-1 & move=l)): h[0];
            TRUE: h[6];
        esac;
    next(v[6]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[6]=h[0] & ((v[6]-v[0]=1 & move=u) | (v[6]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[6];
        esac;

    next(h[7]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[7]=v[0] & ((h[7]-h[0]=1 & move=r) | (h[7]-h[0]=-1 & move=l)): h[0];
            TRUE : h[7];
        esac;
    next(v[7]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[7]=h[0] & ((v[7]-v[0]=1 & move=u) | (v[7]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[7];
        esac;

    next(h[8]) := -- horizontal position of tile 1
        case
            --swap column with h[0] if same row
            v[8]=v[0] & ((h[8]-h[0]=1 & move=r) | (h[8]-h[0]=-1 & move=l)): h[0];
            TRUE : h[8];
        esac;
    next(v[8]) := -- vertical position of tile 1
        case
            --swap row with v[0] if same column
            h[8]=h[0] & ((v[8]-v[0]=1 & move=u) | (v[8]-v[0]=-1 & move=d)) : v[0];
            TRUE: v[8];
        esac;
-- CTLSPEC EF(goal=TRUE); -- verifies that a path exists
CTLSPEC AG(goal=FALSE); -- tries to say that goal can never be found: generates a counter example for us (i.e. generates a path where goal=TRUE)